// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	interbroker "github.com/jorgebay/soda/internal/interbroker"
	mock "github.com/stretchr/testify/mock"

	types "github.com/jorgebay/soda/internal/types"

	uuid "github.com/google/uuid"
)

// Gossiper is an autogenerated mock type for the Gossiper type
type Gossiper struct {
	mock.Mock
}

// AcceptConnections provides a mock function with given fields:
func (_m *Gossiper) AcceptConnections() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGenerations provides a mock function with given fields: ordinal, token
func (_m *Gossiper) GetGenerations(ordinal int, token types.Token) interbroker.GenReadResult {
	ret := _m.Called(ordinal, token)

	var r0 interbroker.GenReadResult
	if rf, ok := ret.Get(0).(func(int, types.Token) interbroker.GenReadResult); ok {
		r0 = rf(ordinal, token)
	} else {
		r0 = ret.Get(0).(interbroker.GenReadResult)
	}

	return r0
}

// HasTokenHistoryForToken provides a mock function with given fields: ordinal, token
func (_m *Gossiper) HasTokenHistoryForToken(ordinal int, token types.Token) (bool, error) {
	ret := _m.Called(ordinal, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, types.Token) bool); ok {
		r0 = rf(ordinal, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, types.Token) error); ok {
		r1 = rf(ordinal, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *Gossiper) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsTokenRangeCovered provides a mock function with given fields: ordinal, token
func (_m *Gossiper) IsTokenRangeCovered(ordinal int, token types.Token) (bool, error) {
	ret := _m.Called(ordinal, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, types.Token) bool); ok {
		r0 = rf(ordinal, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, types.Token) error); ok {
		r1 = rf(ordinal, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenConnections provides a mock function with given fields:
func (_m *Gossiper) OpenConnections() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterGenListener provides a mock function with given fields: listener
func (_m *Gossiper) RegisterGenListener(listener interbroker.GenListener) {
	_m.Called(listener)
}

// SendToFollowers provides a mock function with given fields: replicationInfo, topic, segmentId, body
func (_m *Gossiper) SendToFollowers(replicationInfo types.ReplicationInfo, topic types.TopicDataId, segmentId int64, body []byte) error {
	ret := _m.Called(replicationInfo, topic, segmentId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ReplicationInfo, types.TopicDataId, int64, []byte) error); ok {
		r0 = rf(replicationInfo, topic, segmentId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToLeader provides a mock function with given fields: replicationInfo, topic, body
func (_m *Gossiper) SendToLeader(replicationInfo types.ReplicationInfo, topic string, body []byte) error {
	ret := _m.Called(replicationInfo, topic, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ReplicationInfo, string, []byte) error); ok {
		r0 = rf(replicationInfo, topic, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGenerationAsProposed provides a mock function with given fields: ordinal, newGen, expectedTx
func (_m *Gossiper) SetGenerationAsProposed(ordinal int, newGen *types.Generation, expectedTx *uuid.UUID) error {
	ret := _m.Called(ordinal, newGen, expectedTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *types.Generation, *uuid.UUID) error); ok {
		r0 = rf(ordinal, newGen, expectedTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForPeersUp provides a mock function with given fields:
func (_m *Gossiper) WaitForPeersUp() {
	_m.Called()
}
