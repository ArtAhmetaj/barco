// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	types "github.com/jorgebay/soda/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// DbWasNewlyCreated provides a mock function with given fields:
func (_m *Client) DbWasNewlyCreated() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetGenerationsByToken provides a mock function with given fields: token
func (_m *Client) GetGenerationsByToken(token types.Token) ([]types.Generation, error) {
	ret := _m.Called(token)

	var r0 []types.Generation
	if rf, ok := ret.Get(0).(func(types.Token) []types.Generation); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Generation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *Client) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertGeneration provides a mock function with given fields: existing, newGen
func (_m *Client) UpsertGeneration(existing *types.Generation, newGen *types.Generation) error {
	ret := _m.Called(existing, newGen)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Generation, *types.Generation) error); ok {
		r0 = rf(existing, newGen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
