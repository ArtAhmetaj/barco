// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	types "github.com/jorgebay/soda/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// OffsetState is an autogenerated mock type for the OffsetState type
type OffsetState struct {
	mock.Mock
}

// CanConsumeToken provides a mock function with given fields: group, topic, gen
func (_m *OffsetState) CanConsumeToken(group string, topic string, gen types.Generation) bool {
	ret := _m.Called(group, topic, gen)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, types.Generation) bool); ok {
		r0 = rf(group, topic, gen)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: group, topic, token, rangeIndex
func (_m *OffsetState) Get(group string, topic string, token types.Token, rangeIndex types.RangeIndex) *types.Offset {
	ret := _m.Called(group, topic, token, rangeIndex)

	var r0 *types.Offset
	if rf, ok := ret.Get(0).(func(string, string, types.Token, types.RangeIndex) *types.Offset); ok {
		r0 = rf(group, topic, token, rangeIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Offset)
		}
	}

	return r0
}

// Init provides a mock function with given fields:
func (_m *OffsetState) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProducerOffsetLocal provides a mock function with given fields: topic
func (_m *OffsetState) ProducerOffsetLocal(topic *types.TopicDataId) (uint64, error) {
	ret := _m.Called(topic)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*types.TopicDataId) uint64); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.TopicDataId) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: group, topic, token, rangeIndex, value, commit
func (_m *OffsetState) Set(group string, topic string, token types.Token, rangeIndex types.RangeIndex, value types.Offset, commit types.OffsetCommitType) {
	_m.Called(group, topic, token, rangeIndex, value, commit)
}
